// Knapsack problem
procedure knapsack
{
    // Input:
    // Values (stored in array v)
    // Weights (stored in array w)
    // Number of distinct items (n)
    // Knapsack capacity (W)

    int i,j;
    int n, W;
    int v[1:100], w[1:100];
    int m[1:100, 1:100];

    write 'n';
    read n;

    write 'W';
    read W;

    write 'v';
    for i = 1 to n by 1
    {
        read v[i];
    }

    write 'w';
    for i = 1 to W by 1
    {
        read w[i];
    }

    for j = 0 to W by 1
    {
        m[0, j] = 0;
    }

    for i = 1 to n by 1
    {
        for j = 0 to W by 1
        {
            if (w[i-1] > j) then
            {
                m[i, j] = m[i-1, j];
            }
            else
            {
                if (m[i-1, j] > m[i-1, j-w[i-1]] + v[i-1]) then
                {
                    m[i, j] = m[i-1, j];
                }
                else
                {
                    m[i, j] = m[i-1, j-w[i-1]] + v[i-1];
                }
            }
        }
    }

    for i = 1 to n by 1
    {
        for j = 0 to W by 1
        {
            write m[i,j];
        }
    }
    
}
